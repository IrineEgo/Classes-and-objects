
///////////////////
  "Инкапсуляция" - это первый и базовый принцип ООП (есть еще два: "Полиморфизм" и "Наследование"). Этот принцип позволяет разработчику
собрать в одно место всю логику (образно говоря, "поместить в капсулу" - класс), которая относится к чему-то одному (например: к продукту, 
клиенту, кнопке) и спрятав программный код "за кулисы", открывать остальным пользователям, только то, что не повлияет на использование 
заложенных данных в программный код. Тем самым, упрощается процесс кодирования (сокращаются строки) и защищаются данные от случайных или 
преднамеренных ошибок. 
   Проще говоря, принцип инкапсуляции, позволяет обычному пользователю (или стороннему разработчику), безопасно и просто работать с 
интерфейсом (внося необходимые корректировки). Точно также, как миллионам автолюбителей, легко и безопасно управлять своими автомобилями, 
совершенно не разбираясь во всех механизмах и процессах, которые для этого необходимы.

///////////////////
  Объект - это конкретный и индивидуальный экземпляр класса (типа), который работает по правилам, заданным в классе. Например, в 
интернет-магазине:
в классе "Книги": объект - книга Э.Хемингуэй "По ком звонит колокол" (издательства AST Publisher, в твердом переплете, 2016 года выпуска);
в классе "Декоративная косметика": объект - губная помада "Clarins Joli Rouge" (производство Франция, цвет 731 (rose berry), вес 3,5г).
  Если брать примеры из жизни, то объекты это: стоящая под окном конкретная машина, конкретное здание (в котором работаешь), конкретная модель 
часов на руке и т.д.

  Плюсы:
  Можно добавлять и удалять неограниченное колличество новых объектов, быстро и безопасно вносить необходимые корректировки в них 
(изменяя свойства и методы работы с ними). Их легко абстрактно представить для себя, в виде печенек из формочки, которых можно напечь столько, 
сколько необходимо.
  Минусы:
  Для того, чтобы с объектами можно было просто и эффективно работать, требуется написать хороший, логически выверенный код, на начальном этапе. 
Эту сложную работу способен выполнить программист высокого уровня (часто, целая комманда программистов), потому себестоимость работы становится
высокой. В примере выше, была приведена формочка для печенья. Для того, чтобы печенье получилось красивое и с четкими формами, эта формочка 
должна быть качественной и безопасной, а значит над ней должны потрудиться хорошие специалисты, при ее разработке и производстве. Так и в 
написании кода ООП - трудятся большие профессионалы.
  При большом количестве классов и объектов, иногда бывает сложно отследить логику работы.
